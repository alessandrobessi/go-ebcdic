package ebcdic

import (
	"reflect"
	"testing"
)

/**
 * Test encoding unicode to EBCDIC 037
 **/
func TestSplitEncodeEBCDIC037(t *testing.T) {
	in := "This string è contains $%? different special _chars_, z.B. § and Ö"
	want := []byte{
		0xE3, 0x88, 0x89, 0xA2, 0x40, 0xA2, 0xA3, 0x99, 0x89, 0x95, 0x87, 0x40, 0x54, 0x40, 0x83, 0x96,
		0x95, 0xA3, 0x81, 0x89, 0x95, 0xA2, 0x40, 0x5B, 0x6C, 0x6F, 0x40, 0x84, 0x89, 0x86, 0x86, 0x85,
		0x99, 0x85, 0x95, 0xA3, 0x40, 0xA2, 0x97, 0x85, 0x83, 0x89, 0x81, 0x93, 0x40, 0x6D, 0x83, 0x88,
		0x81, 0x99, 0xA2, 0x6D, 0x6B, 0x40, 0xA9, 0x4B, 0xC2, 0x4B, 0x40, 0xB5, 0x40, 0x81, 0x95, 0x84,
		0x40, 0xEC,
	}

	got, err := Encode(in, EBCDIC037)

	if err != nil {
		t.Error(err)
	}

	if !reflect.DeepEqual(got, want) {
		t.Errorf("Encode(\"%s\", EBCDIC037) = %v; want %v", in, got, want)
	}
}

/**
 * Test decoding EBCDIC 037 to unicode
 **/
func TestSplitDecodeEBCDIC037(t *testing.T) {
	in := []byte{
		0xE3, 0x88, 0x89, 0xA2, 0x40, 0xA2, 0xA3, 0x99, 0x89, 0x95, 0x87, 0x40, 0x54, 0x40, 0x83, 0x96,
		0x95, 0xA3, 0x81, 0x89, 0x95, 0xA2, 0x40, 0x5B, 0x6C, 0x6F, 0x40, 0x84, 0x89, 0x86, 0x86, 0x85,
		0x99, 0x85, 0x95, 0xA3, 0x40, 0xA2, 0x97, 0x85, 0x83, 0x89, 0x81, 0x93, 0x40, 0x6D, 0x83, 0x88,
		0x81, 0x99, 0xA2, 0x6D, 0x6B, 0x40, 0xA9, 0x4B, 0xC2, 0x4B, 0x40, 0xB5, 0x40, 0x81, 0x95, 0x84,
		0x40, 0xEC,
	}
	want := "This string è contains $%? different special _chars_, z.B. § and Ö"

	got, err := Decode(in, EBCDIC037)

	if err != nil {
		t.Error(err)
	}

	if got != want {
		t.Errorf("Decode(%v, EBCDIC037) = \"%s\"; want \"%s\"", in, got, want)
	}
}

/**
 * Test encoding unicode to EBCDIC 273
 **/
func TestSplitEncodeEBCDIC273(t *testing.T) {
	in := "Dieser String enthält $%? verschiedene _Sonderzeichen_, z.B. ß"
	want := []byte{
		0xC4, 0x89, 0x85, 0xA2, 0x85, 0x99, 0x40, 0xE2, 0xA3, 0x99, 0x89, 0x95, 0x87, 0x40, 0x85, 0x95,
		0xA3, 0x88, 0xC0, 0x93, 0xA3, 0x40, 0x5B, 0x6C, 0x6F, 0x40, 0xA5, 0x85, 0x99, 0xA2, 0x83, 0x88,
		0x89, 0x85, 0x84, 0x85, 0x95, 0x85, 0x40, 0x6D, 0xE2, 0x96, 0x95, 0x84, 0x85, 0x99, 0xA9, 0x85,
		0x89, 0x83, 0x88, 0x85, 0x95, 0x6D, 0x6B, 0x40, 0xA9, 0x4B, 0xC2, 0x4B, 0x40, 0xA1,
	}

	got, err := Encode(in, EBCDIC273)

	if err != nil {
		t.Error(err)
	}

	if !reflect.DeepEqual(got, want) {
		t.Errorf("Encode(\"%s\", EBCDIC273) = %v; want %v", in, got, want)
	}
}

/**
 * Test decoding EBCDIC 273 to unicode
 **/
func TestSplitDecodeEBCDIC273(t *testing.T) {
	in := []byte{
		0xC4, 0x89, 0x85, 0xA2, 0x85, 0x99, 0x40, 0xE2, 0xA3, 0x99, 0x89, 0x95, 0x87, 0x40, 0x85, 0x95,
		0xA3, 0x88, 0xC0, 0x93, 0xA3, 0x40, 0x5B, 0x6C, 0x6F, 0x40, 0xA5, 0x85, 0x99, 0xA2, 0x83, 0x88,
		0x89, 0x85, 0x84, 0x85, 0x95, 0x85, 0x40, 0x6D, 0xE2, 0x96, 0x95, 0x84, 0x85, 0x99, 0xA9, 0x85,
		0x89, 0x83, 0x88, 0x85, 0x95, 0x6D, 0x6B, 0x40, 0xA9, 0x4B, 0xC2, 0x4B, 0x40, 0xA1,
	}
	want := "Dieser String enthält $%? verschiedene _Sonderzeichen_, z.B. ß"

	got, err := Decode(in, EBCDIC273)

	if err != nil {
		t.Error(err)
	}

	if got != want {
		t.Errorf("Decode(%v, EBCDIC273) = \"%s\"; want \"%s\"", in, got, want)
	}
}

func BenchmarkEncode(b *testing.B) {
	in := "This string è contains $%? different special _chars_, z.B. § and Ö"

	for n := 0; n < b.N; n++ {
		Encode(in, EBCDIC037)
	}
}

func BenchmarkDecode(b *testing.B) {
	in := []byte{
		0xE3, 0x88, 0x89, 0xA2, 0x40, 0xA2, 0xA3, 0x99, 0x89, 0x95, 0x87, 0x40, 0x54, 0x40, 0x83, 0x96,
		0x95, 0xA3, 0x81, 0x89, 0x95, 0xA2, 0x40, 0x5B, 0x6C, 0x6F, 0x40, 0x84, 0x89, 0x86, 0x86, 0x85,
		0x99, 0x85, 0x95, 0xA3, 0x40, 0xA2, 0x97, 0x85, 0x83, 0x89, 0x81, 0x93, 0x40, 0x6D, 0x83, 0x88,
		0x81, 0x99, 0xA2, 0x6D, 0x6B, 0x40, 0xA9, 0x4B, 0xC2, 0x4B, 0x40, 0xB5, 0x40, 0x81, 0x95, 0x84,
		0x40, 0xEC,
	}

	for n := 0; n < b.N; n++ {
		Decode(in, EBCDIC037)
	}
}
